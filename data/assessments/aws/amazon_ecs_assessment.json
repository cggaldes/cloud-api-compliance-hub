{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Data Residency & Sovereignty", "criterion_name": "Region Selection", "is_supported": true, "caveats": "", "notes": "Amazon ECS allows you to deploy and manage containers in various AWS regions globally, enabling you to meet data residency requirements by selecting appropriate regions."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Data Residency & Sovereignty", "criterion_name": "Data Location Transparency", "is_supported": true, "caveats": "", "notes": "AWS provides tools and documentation to track and verify data locations within specific AWS regions.  While not always precise to the container level, it's possible to determine the region where ECS tasks are running and data is stored through its various services like S3, EFS etc."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Data Residency & Sovereignty", "criterion_name": "Cross-Region Data Transfer Controls", "is_supported": true, "caveats": "Requires configuration and management of underlying services.", "notes": "Data transfer between regions is controlled through VPC peering, transit gateways, or other networking configurations. ECS itself does not inherently restrict data flow;  it's managed at the infrastructure and application level."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Encryption", "criterion_name": "Encryption in Transit", "is_supported": true, "caveats": "", "notes": "Amazon ECS utilizes HTTPS for communication between components.  TLS 1.2+ is generally in use, though specific cipher suite configuration may depend on the client and other network settings.  It is the responsibility of the user to manage and enforce security policies and configurations."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Encryption", "criterion_name": "Encryption at Rest", "is_supported": true, "caveats": "Requires configuration of underlying storage services.", "notes": "Encryption at rest depends on the storage services used by the ECS tasks.  AWS offers various options for encrypting data stored in EBS volumes, S3 buckets, and other data stores integrated with ECS. This involves configuring customer managed keys (CMKs) or leveraging AWS managed keys."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Authentication & Authorization", "criterion_name": "IAM Integration", "is_supported": true, "caveats": "", "notes": "Amazon ECS tightly integrates with AWS Identity and Access Management (IAM), enabling granular control over access to ECS resources through roles and policies."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Authentication & Authorization", "criterion_name": "Service Account Support", "is_supported": true, "caveats": "", "notes": "IAM roles act as service accounts, allowing ECS tasks and services to access other AWS resources with least privilege."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Authentication & Authorization", "criterion_name": "MFA", "is_supported": true, "caveats": "", "notes": "AWS IAM supports MFA for users and administrators accessing ECS through the AWS console or CLI.  Enforcement is the responsibility of the organization."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Authentication & Authorization", "criterion_name": "Standard Protocols", "is_supported": true, "caveats": "", "notes": "Amazon ECS primarily uses AWS's own authentication mechanisms, but integrates with other services that support OAuth 2.0 and similar standards for authorization."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Authentication & Authorization", "criterion_name": "API Key Management", "is_supported": false, "caveats": "Relies on IAM for authentication and authorization.", "notes": "ECS doesn't directly use API keys; it relies on IAM roles and policies for authentication and authorization."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Network Security", "criterion_name": "Private Access", "is_supported": true, "caveats": "", "notes": "Amazon ECS supports deploying containers within a VPC, enabling private networking and access control through security groups and network ACLs."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Network Security", "criterion_name": "Firewall Rules", "is_supported": true, "caveats": "Requires configuration of security groups and network ACLs.", "notes": "Security groups and Network ACLs within the VPC are used to control ingress and egress traffic to and from ECS resources."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Network Security", "criterion_name": "DDoS Protection", "is_supported": true, "caveats": "Requires configuration of AWS Shield or other services.", "notes": "AWS Shield and other AWS services provide protection against DDoS attacks; integrating these protections with ECS deployments is necessary."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Network Security", "criterion_name": "API Gateway Integration", "is_supported": true, "caveats": "Requires separate configuration.", "notes": "While not directly integrated, API Gateway can be used to manage and secure traffic to applications running in ECS."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Logging & Monitoring", "criterion_name": "Audit Logging", "is_supported": true, "caveats": "Requires configuration of CloudTrail.", "notes": "AWS CloudTrail provides audit logging for API calls related to ECS management."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Logging & Monitoring", "criterion_name": "Access Logging", "is_supported": true, "caveats": "Requires configuration of logging within the ECS task.", "notes": "Access logs are not automatically generated by ECS, but must be explicitly configured within the applications and services running in containers."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Logging & Monitoring", "criterion_name": "Monitoring & Alerting", "is_supported": true, "caveats": "Requires configuration of CloudWatch.", "notes": "Amazon CloudWatch provides metrics and monitoring capabilities that can be integrated with ECS to create alerts and monitor the health and performance of ECS clusters and tasks."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Logging & Monitoring", "criterion_name": "Log Retention", "is_supported": true, "caveats": "Requires configuration of CloudWatch Logs.", "notes": "Log retention policies are configurable within CloudWatch Logs for logs related to ECS."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Vulnerability Management & Patching", "criterion_name": "Security Updates", "is_supported": true, "caveats": "Responsibility lies with the user for container images and underlying infrastructure.", "notes": "AWS regularly updates its underlying infrastructure, but it is up to users to manage security updates for container images and applications running within ECS."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Vulnerability Management & Patching", "criterion_name": "Vulnerability Scanning", "is_supported": false, "caveats": "Requires integration with third-party tools.", "notes": "ECS doesn't provide built-in vulnerability scanning.  Third-party tools and services would need to be integrated to perform vulnerability scans on container images and running applications."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Compliance & Certifications", "criterion_name": "Industry Certifications", "is_supported": true, "caveats": "Compliance depends on proper configuration and use.", "notes": "AWS is certified for many compliance frameworks, including ISO 27001, SOC 2, and others. Compliance of applications running on ECS is dependent on proper configuration and management by the user."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Compliance & Certifications", "criterion_name": "Compliance Documentation", "is_supported": true, "caveats": "", "notes": "AWS provides comprehensive compliance documentation on its website."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Data Loss Prevention (DLP)", "criterion_name": "Sensitive Data Scanning", "is_supported": false, "caveats": "Requires integration with other AWS services.", "notes": "ECS doesn't have built-in DLP capabilities.  Integration with other AWS services like Macie would be necessary to scan for sensitive data."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Data Loss Prevention (DLP)", "criterion_name": "Data Masking/Redaction", "is_supported": false, "caveats": "Requires implementation within the application.", "notes": "Data masking/redaction is not a feature of ECS itself; it must be implemented within the applications running inside the containers."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Secure Development Lifecycle (SDL)", "criterion_name": "API Design Principles", "is_supported": false, "caveats": "Depends on application design.", "notes": "ECS itself doesn't define API design principles. Secure coding practices are the responsibility of application developers."}
{"api_name": "Amazon ECS", "api_domain_name": "ecs.amazonaws.com", "platform": "aws", "is_endorsed": false, "criterion_category": "Secure Development Lifecycle (SDL)", "criterion_name": "Code Review & Testing", "is_supported": false, "caveats": "Responsibility lies with the developers of containerized applications.", "notes": "Code review and testing are the responsibility of the developers creating applications that run on ECS;  ECS doesn't inherently provide these features."}